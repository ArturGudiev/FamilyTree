//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainRelationship FamilyTreeModelHasPeople
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasPeople.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasPeople.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a9a7b929-6ed7-4362-ba59-dd04719c5d64")]
	public partial class FamilyTreeModelHasPeople : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FamilyTreeModelHasPeople domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa9a7b929, 0x6ed7, 0x4362, 0xba, 0x59, 0xdd, 0x04, 0x71, 0x9c, 0x5d, 0x64);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FamilyTreeModelHasPeople link in the same Partition as the given FamilyTreeModel
		/// </summary>
		/// <param name="source">FamilyTreeModel to use as the source of the relationship.</param>
		/// <param name="target">Person to use as the target of the relationship.</param>
		public FamilyTreeModelHasPeople(FamilyTreeModel source, Person target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FamilyTreeModelHasPeople.FamilyTreeModelDomainRoleId, source), new DslModeling::RoleAssignment(FamilyTreeModelHasPeople.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FamilyTreeModelHasPeople(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FamilyTreeModelHasPeople(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FamilyTreeModelHasPeople(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FamilyTreeModelHasPeople(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FamilyTreeModel domain role code
		
		/// <summary>
		/// FamilyTreeModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid FamilyTreeModelDomainRoleId = new global::System.Guid(0x90bd59b9, 0x3c89, 0x4468, 0xac, 0x10, 0xf4, 0x1b, 0x69, 0x87, 0xec, 0x8a);
		
		/// <summary>
		/// DomainRole FamilyTreeModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasPeople/FamilyTreeModel.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasPeople/FamilyTreeModel.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "People", PropertyDisplayNameKey="Company.FamilyTree.FamilyTreeModelHasPeople/FamilyTreeModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("90bd59b9-3c89-4468-ac10-f41b6987ec8a")]
		public virtual FamilyTreeModel FamilyTreeModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FamilyTreeModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, FamilyTreeModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FamilyTreeModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FamilyTreeModel of a Person
		/// <summary>
		/// Gets FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FamilyTreeModel GetFamilyTreeModel(Person element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as FamilyTreeModel;
		}
		
		/// <summary>
		/// Sets FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFamilyTreeModel(Person element, FamilyTreeModel newFamilyTreeModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newFamilyTreeModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x180cda13, 0x6e6b, 0x451e, 0x87, 0x96, 0x72, 0xe0, 0x73, 0x9e, 0x6a, 0x23);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasPeople/Element.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasPeople/Element.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FamilyTreeModel", PropertyDisplayNameKey="Company.FamilyTree.FamilyTreeModelHasPeople/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("180cda13-6e6b-451e-8796-72e0739e6a23")]
		public virtual Person Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access People of a FamilyTreeModel
		/// <summary>
		/// Gets a list of People.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetPeople(FamilyTreeModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, FamilyTreeModelDomainRoleId);
		}
		#endregion
		#region FamilyTreeModel link accessor
		/// <summary>
		/// Get the list of FamilyTreeModelHasPeople links to a FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.FamilyTreeModelHasPeople> GetLinksToPeople ( global::Company.FamilyTree.FamilyTreeModel familyTreeModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasPeople>(familyTreeModelInstance, global::Company.FamilyTree.FamilyTreeModelHasPeople.FamilyTreeModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the FamilyTreeModelHasPeople link to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.FamilyTreeModelHasPeople GetLinkToFamilyTreeModel (global::Company.FamilyTree.Person elementInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasPeople> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasPeople>(elementInstance, global::Company.FamilyTree.FamilyTreeModelHasPeople.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FamilyTreeModelHasPeople instance accessors
		
		/// <summary>
		/// Get any FamilyTreeModelHasPeople links between a given FamilyTreeModel and a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.FamilyTreeModelHasPeople> GetLinks( global::Company.FamilyTree.FamilyTreeModel source, global::Company.FamilyTree.Person target )
		{
			global::System.Collections.Generic.List<global::Company.FamilyTree.FamilyTreeModelHasPeople> outLinks = new global::System.Collections.Generic.List<global::Company.FamilyTree.FamilyTreeModelHasPeople>();
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasPeople> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasPeople>(source, global::Company.FamilyTree.FamilyTreeModelHasPeople.FamilyTreeModelDomainRoleId);
			foreach ( global::Company.FamilyTree.FamilyTreeModelHasPeople link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FamilyTreeModelHasPeople link between a given FamilyTreeModeland a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.FamilyTreeModelHasPeople GetLink( global::Company.FamilyTree.FamilyTreeModel source, global::Company.FamilyTree.Person target )
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasPeople> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasPeople>(source, global::Company.FamilyTree.FamilyTreeModelHasPeople.FamilyTreeModelDomainRoleId);
			foreach ( global::Company.FamilyTree.FamilyTreeModelHasPeople link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainRelationship PersonReferencesChildren
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.PersonReferencesChildren.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.PersonReferencesChildren.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6e9b7214-4cbf-430a-ad02-89badf30079e")]
	public partial class PersonReferencesChildren : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// PersonReferencesChildren domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6e9b7214, 0x4cbf, 0x430a, 0xad, 0x02, 0x89, 0xba, 0xdf, 0x30, 0x07, 0x9e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a PersonReferencesChildren link in the same Partition as the given Person
		/// </summary>
		/// <param name="source">Person to use as the source of the relationship.</param>
		/// <param name="target">Person to use as the target of the relationship.</param>
		public PersonReferencesChildren(Person source, Person target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(PersonReferencesChildren.SourceDomainRoleId, source), new DslModeling::RoleAssignment(PersonReferencesChildren.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PersonReferencesChildren(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PersonReferencesChildren(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public PersonReferencesChildren(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public PersonReferencesChildren(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0xfc0a3c0a, 0x63c3, 0x4f82, 0xac, 0xf8, 0x60, 0x64, 0x3e, 0x3c, 0x2e, 0x16);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Company.FamilyTree.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.PersonReferencesChildren/Source.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.PersonReferencesChildren/Source.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Children", PropertyDisplayNameKey="Company.FamilyTree.PersonReferencesChildren/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fc0a3c0a-63c3-4f82-acf8-60643e3c2e16")]
		public virtual Person Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Parents of a Person
		/// <summary>
		/// Gets a list of Parents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetParents(Person element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xfb4c84f8, 0x3062, 0x4800, 0x8d, 0x2c, 0xb2, 0x16, 0x80, 0xe8, 0x3a, 0x3d);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Company.FamilyTree.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.PersonReferencesChildren/Target.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.PersonReferencesChildren/Target.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Parents", PropertyDisplayNameKey="Company.FamilyTree.PersonReferencesChildren/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fb4c84f8-3062-4800-8d2c-b21680e83a3d")]
		public virtual Person Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Children of a Person
		/// <summary>
		/// Gets a list of Children.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetChildren(Person element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of PersonReferencesChildren links to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.PersonReferencesChildren> GetLinksToChildren ( global::Company.FamilyTree.Person sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.PersonReferencesChildren>(sourceInstance, global::Company.FamilyTree.PersonReferencesChildren.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of PersonReferencesChildren links to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.PersonReferencesChildren> GetLinksToParents ( global::Company.FamilyTree.Person targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.PersonReferencesChildren>(targetInstance, global::Company.FamilyTree.PersonReferencesChildren.TargetDomainRoleId);
		}
		#endregion
		#region PersonReferencesChildren instance accessors
		
		/// <summary>
		/// Get any PersonReferencesChildren links between a given Person and a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.PersonReferencesChildren> GetLinks( global::Company.FamilyTree.Person source, global::Company.FamilyTree.Person target )
		{
			global::System.Collections.Generic.List<global::Company.FamilyTree.PersonReferencesChildren> outLinks = new global::System.Collections.Generic.List<global::Company.FamilyTree.PersonReferencesChildren>();
			global::System.Collections.Generic.IList<global::Company.FamilyTree.PersonReferencesChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.PersonReferencesChildren>(source, global::Company.FamilyTree.PersonReferencesChildren.SourceDomainRoleId);
			foreach ( global::Company.FamilyTree.PersonReferencesChildren link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one PersonReferencesChildren link between a given Personand a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.PersonReferencesChildren GetLink( global::Company.FamilyTree.Person source, global::Company.FamilyTree.Person target )
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.PersonReferencesChildren> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.PersonReferencesChildren>(source, global::Company.FamilyTree.PersonReferencesChildren.SourceDomainRoleId);
			foreach ( global::Company.FamilyTree.PersonReferencesChildren link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainRelationship FamilyTreeModelHasTowns
	/// Description for Company.FamilyTree.FamilyTreeModelHasTowns
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasTowns.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasTowns.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a541dbe1-3b7e-4d08-817c-398fb7281760")]
	public partial class FamilyTreeModelHasTowns : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FamilyTreeModelHasTowns domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa541dbe1, 0x3b7e, 0x4d08, 0x81, 0x7c, 0x39, 0x8f, 0xb7, 0x28, 0x17, 0x60);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FamilyTreeModelHasTowns link in the same Partition as the given FamilyTreeModel
		/// </summary>
		/// <param name="source">FamilyTreeModel to use as the source of the relationship.</param>
		/// <param name="target">Town to use as the target of the relationship.</param>
		public FamilyTreeModelHasTowns(FamilyTreeModel source, Town target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FamilyTreeModelHasTowns.FamilyTreeModelDomainRoleId, source), new DslModeling::RoleAssignment(FamilyTreeModelHasTowns.TownDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FamilyTreeModelHasTowns(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FamilyTreeModelHasTowns(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FamilyTreeModelHasTowns(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FamilyTreeModelHasTowns(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FamilyTreeModel domain role code
		
		/// <summary>
		/// FamilyTreeModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid FamilyTreeModelDomainRoleId = new global::System.Guid(0x8a6d92a9, 0xcf70, 0x42d4, 0x99, 0x31, 0xd8, 0xea, 0xff, 0xcf, 0xa4, 0x07);
		
		/// <summary>
		/// DomainRole FamilyTreeModel
		/// Description for Company.FamilyTree.FamilyTreeModelHasTowns.FamilyTreeModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasTowns/FamilyTreeModel.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasTowns/FamilyTreeModel.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Towns", PropertyDisplayNameKey="Company.FamilyTree.FamilyTreeModelHasTowns/FamilyTreeModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("8a6d92a9-cf70-42d4-9931-d8eaffcfa407")]
		public virtual FamilyTreeModel FamilyTreeModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FamilyTreeModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, FamilyTreeModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FamilyTreeModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FamilyTreeModel of a Town
		/// <summary>
		/// Gets FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FamilyTreeModel GetFamilyTreeModel(Town element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TownDomainRoleId) as FamilyTreeModel;
		}
		
		/// <summary>
		/// Sets FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFamilyTreeModel(Town element, FamilyTreeModel newFamilyTreeModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TownDomainRoleId, newFamilyTreeModel);
		}
		#endregion
		#region Town domain role code
		
		/// <summary>
		/// Town domain role Id.
		/// </summary>
		public static readonly global::System.Guid TownDomainRoleId = new global::System.Guid(0x92a058d5, 0x0a36, 0x47da, 0x9d, 0xf1, 0xcf, 0xfe, 0x92, 0xbe, 0x1e, 0x42);
		
		/// <summary>
		/// DomainRole Town
		/// Description for Company.FamilyTree.FamilyTreeModelHasTowns.Town
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasTowns/Town.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasTowns/Town.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FamilyTreeModel", PropertyDisplayNameKey="Company.FamilyTree.FamilyTreeModelHasTowns/Town.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("92a058d5-0a36-47da-9df1-cffe92be1e42")]
		public virtual Town Town
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Town)DslModeling::DomainRoleInfo.GetRolePlayer(this, TownDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TownDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Towns of a FamilyTreeModel
		/// <summary>
		/// Gets a list of Towns.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Town> GetTowns(FamilyTreeModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Town>, Town>(element, FamilyTreeModelDomainRoleId);
		}
		#endregion
		#region FamilyTreeModel link accessor
		/// <summary>
		/// Get the list of FamilyTreeModelHasTowns links to a FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.FamilyTreeModelHasTowns> GetLinksToTowns ( global::Company.FamilyTree.FamilyTreeModel familyTreeModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasTowns>(familyTreeModelInstance, global::Company.FamilyTree.FamilyTreeModelHasTowns.FamilyTreeModelDomainRoleId);
		}
		#endregion
		#region Town link accessor
		/// <summary>
		/// Get the FamilyTreeModelHasTowns link to a Town.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.FamilyTreeModelHasTowns GetLinkToFamilyTreeModel (global::Company.FamilyTree.Town townInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasTowns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasTowns>(townInstance, global::Company.FamilyTree.FamilyTreeModelHasTowns.TownDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Town not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FamilyTreeModelHasTowns instance accessors
		
		/// <summary>
		/// Get any FamilyTreeModelHasTowns links between a given FamilyTreeModel and a Town.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.FamilyTreeModelHasTowns> GetLinks( global::Company.FamilyTree.FamilyTreeModel source, global::Company.FamilyTree.Town target )
		{
			global::System.Collections.Generic.List<global::Company.FamilyTree.FamilyTreeModelHasTowns> outLinks = new global::System.Collections.Generic.List<global::Company.FamilyTree.FamilyTreeModelHasTowns>();
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasTowns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasTowns>(source, global::Company.FamilyTree.FamilyTreeModelHasTowns.FamilyTreeModelDomainRoleId);
			foreach ( global::Company.FamilyTree.FamilyTreeModelHasTowns link in links )
			{
				if ( target.Equals(link.Town) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FamilyTreeModelHasTowns link between a given FamilyTreeModeland a Town.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.FamilyTreeModelHasTowns GetLink( global::Company.FamilyTree.FamilyTreeModel source, global::Company.FamilyTree.Town target )
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasTowns> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasTowns>(source, global::Company.FamilyTree.FamilyTreeModelHasTowns.FamilyTreeModelDomainRoleId);
			foreach ( global::Company.FamilyTree.FamilyTreeModelHasTowns link in links )
			{
				if ( target.Equals(link.Town) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainRelationship Residence
	/// Description for Company.FamilyTree.Residence
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.Residence.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.Residence.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("dbb9973b-a018-4aaf-8806-6176015727ac")]
	public partial class Residence : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Residence domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdbb9973b, 0xa018, 0x4aaf, 0x88, 0x06, 0x61, 0x76, 0x01, 0x57, 0x27, 0xac);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Residence link in the same Partition as the given Town
		/// </summary>
		/// <param name="source">Town to use as the source of the relationship.</param>
		/// <param name="target">Person to use as the target of the relationship.</param>
		public Residence(Town source, Person target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Residence.TownDomainRoleId, source), new DslModeling::RoleAssignment(Residence.PersonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Residence(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Residence(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Residence(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Residence(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Town domain role code
		
		/// <summary>
		/// Town domain role Id.
		/// </summary>
		public static readonly global::System.Guid TownDomainRoleId = new global::System.Guid(0xc06b4268, 0x2047, 0x4158, 0x8b, 0x01, 0x28, 0x91, 0x68, 0xe3, 0xae, 0x12);
		
		/// <summary>
		/// DomainRole Town
		/// Description for Company.FamilyTree.Residence.Town
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Residence/Town.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Residence/Town.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Residents", PropertyDisplayNameKey="Company.FamilyTree.Residence/Town.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c06b4268-2047-4158-8b01-289168e3ae12")]
		public virtual Town Town
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Town)DslModeling::DomainRoleInfo.GetRolePlayer(this, TownDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TownDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Town of a Person
		/// <summary>
		/// Gets Town.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Town GetTown(Person element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, PersonDomainRoleId) as Town;
		}
		
		/// <summary>
		/// Sets Town.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTown(Person element, Town newTown)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, PersonDomainRoleId, newTown);
		}
		#endregion
		#region Person domain role code
		
		/// <summary>
		/// Person domain role Id.
		/// </summary>
		public static readonly global::System.Guid PersonDomainRoleId = new global::System.Guid(0x4944f110, 0xd564, 0x4c74, 0x91, 0xb6, 0xa4, 0xfd, 0x0b, 0x27, 0x8f, 0x66);
		
		/// <summary>
		/// DomainRole Person
		/// Description for Company.FamilyTree.Residence.Person
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Residence/Person.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Residence/Person.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Town", PropertyDisplayNameKey="Company.FamilyTree.Residence/Person.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("4944f110-d564-4c74-91b6-a4fd0b278f66")]
		public virtual Person Person
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, PersonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PersonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Residents of a Town
		/// <summary>
		/// Gets a list of Residents.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetResidents(Town element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, TownDomainRoleId);
		}
		#endregion
		#region Town link accessor
		/// <summary>
		/// Get the list of Residence links to a Town.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.Residence> GetLinksToResidents ( global::Company.FamilyTree.Town townInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.Residence>(townInstance, global::Company.FamilyTree.Residence.TownDomainRoleId);
		}
		#endregion
		#region Person link accessor
		/// <summary>
		/// Get the Residence link to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.Residence GetLinkToTown (global::Company.FamilyTree.Person personInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.Residence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.Residence>(personInstance, global::Company.FamilyTree.Residence.PersonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Person not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Residence instance accessors
		
		/// <summary>
		/// Get any Residence links between a given Town and a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.Residence> GetLinks( global::Company.FamilyTree.Town source, global::Company.FamilyTree.Person target )
		{
			global::System.Collections.Generic.List<global::Company.FamilyTree.Residence> outLinks = new global::System.Collections.Generic.List<global::Company.FamilyTree.Residence>();
			global::System.Collections.Generic.IList<global::Company.FamilyTree.Residence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.Residence>(source, global::Company.FamilyTree.Residence.TownDomainRoleId);
			foreach ( global::Company.FamilyTree.Residence link in links )
			{
				if ( target.Equals(link.Person) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Residence link between a given Townand a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.Residence GetLink( global::Company.FamilyTree.Town source, global::Company.FamilyTree.Person target )
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.Residence> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.Residence>(source, global::Company.FamilyTree.Residence.TownDomainRoleId);
			foreach ( global::Company.FamilyTree.Residence link in links )
			{
				if ( target.Equals(link.Person) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainRelationship FamilyTreeModelHasNationalities
	/// Description for Company.FamilyTree.FamilyTreeModelHasNationalities
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasNationalities.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasNationalities.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("8e41d523-38f9-4887-ad87-9acc8f1fcd78")]
	public partial class FamilyTreeModelHasNationalities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FamilyTreeModelHasNationalities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8e41d523, 0x38f9, 0x4887, 0xad, 0x87, 0x9a, 0xcc, 0x8f, 0x1f, 0xcd, 0x78);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FamilyTreeModelHasNationalities link in the same Partition as the given FamilyTreeModel
		/// </summary>
		/// <param name="source">FamilyTreeModel to use as the source of the relationship.</param>
		/// <param name="target">Nationality to use as the target of the relationship.</param>
		public FamilyTreeModelHasNationalities(FamilyTreeModel source, Nationality target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FamilyTreeModelHasNationalities.FamilyTreeModelDomainRoleId, source), new DslModeling::RoleAssignment(FamilyTreeModelHasNationalities.NationalityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FamilyTreeModelHasNationalities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FamilyTreeModelHasNationalities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FamilyTreeModelHasNationalities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FamilyTreeModelHasNationalities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region FamilyTreeModel domain role code
		
		/// <summary>
		/// FamilyTreeModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid FamilyTreeModelDomainRoleId = new global::System.Guid(0x3dde5e62, 0xbd84, 0x43f3, 0x86, 0xec, 0x42, 0xd0, 0x69, 0x85, 0xd5, 0x17);
		
		/// <summary>
		/// DomainRole FamilyTreeModel
		/// Description for
		/// Company.FamilyTree.FamilyTreeModelHasNationalities.FamilyTreeModel
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasNationalities/FamilyTreeModel.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasNationalities/FamilyTreeModel.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Nationalities", PropertyDisplayNameKey="Company.FamilyTree.FamilyTreeModelHasNationalities/FamilyTreeModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3dde5e62-bd84-43f3-86ec-42d06985d517")]
		public virtual FamilyTreeModel FamilyTreeModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (FamilyTreeModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, FamilyTreeModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, FamilyTreeModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access FamilyTreeModel of a Nationality
		/// <summary>
		/// Gets FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static FamilyTreeModel GetFamilyTreeModel(Nationality element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, NationalityDomainRoleId) as FamilyTreeModel;
		}
		
		/// <summary>
		/// Sets FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetFamilyTreeModel(Nationality element, FamilyTreeModel newFamilyTreeModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, NationalityDomainRoleId, newFamilyTreeModel);
		}
		#endregion
		#region Nationality domain role code
		
		/// <summary>
		/// Nationality domain role Id.
		/// </summary>
		public static readonly global::System.Guid NationalityDomainRoleId = new global::System.Guid(0xb11ca844, 0xee54, 0x4442, 0x97, 0xfc, 0xcf, 0x84, 0x3b, 0x22, 0x8b, 0x19);
		
		/// <summary>
		/// DomainRole Nationality
		/// Description for Company.FamilyTree.FamilyTreeModelHasNationalities.Nationality
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModelHasNationalities/Nationality.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModelHasNationalities/Nationality.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "FamilyTreeModel", PropertyDisplayNameKey="Company.FamilyTree.FamilyTreeModelHasNationalities/Nationality.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("b11ca844-ee54-4442-97fc-cf843b228b19")]
		public virtual Nationality Nationality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Nationality)DslModeling::DomainRoleInfo.GetRolePlayer(this, NationalityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NationalityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Nationalities of a FamilyTreeModel
		/// <summary>
		/// Gets a list of Nationalities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Nationality> GetNationalities(FamilyTreeModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Nationality>, Nationality>(element, FamilyTreeModelDomainRoleId);
		}
		#endregion
		#region FamilyTreeModel link accessor
		/// <summary>
		/// Get the list of FamilyTreeModelHasNationalities links to a FamilyTreeModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.FamilyTreeModelHasNationalities> GetLinksToNationalities ( global::Company.FamilyTree.FamilyTreeModel familyTreeModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasNationalities>(familyTreeModelInstance, global::Company.FamilyTree.FamilyTreeModelHasNationalities.FamilyTreeModelDomainRoleId);
		}
		#endregion
		#region Nationality link accessor
		/// <summary>
		/// Get the FamilyTreeModelHasNationalities link to a Nationality.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.FamilyTreeModelHasNationalities GetLinkToFamilyTreeModel (global::Company.FamilyTree.Nationality nationalityInstance)
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasNationalities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasNationalities>(nationalityInstance, global::Company.FamilyTree.FamilyTreeModelHasNationalities.NationalityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Nationality not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region FamilyTreeModelHasNationalities instance accessors
		
		/// <summary>
		/// Get any FamilyTreeModelHasNationalities links between a given FamilyTreeModel and a Nationality.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.FamilyTreeModelHasNationalities> GetLinks( global::Company.FamilyTree.FamilyTreeModel source, global::Company.FamilyTree.Nationality target )
		{
			global::System.Collections.Generic.List<global::Company.FamilyTree.FamilyTreeModelHasNationalities> outLinks = new global::System.Collections.Generic.List<global::Company.FamilyTree.FamilyTreeModelHasNationalities>();
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasNationalities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasNationalities>(source, global::Company.FamilyTree.FamilyTreeModelHasNationalities.FamilyTreeModelDomainRoleId);
			foreach ( global::Company.FamilyTree.FamilyTreeModelHasNationalities link in links )
			{
				if ( target.Equals(link.Nationality) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FamilyTreeModelHasNationalities link between a given FamilyTreeModeland a Nationality.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.FamilyTreeModelHasNationalities GetLink( global::Company.FamilyTree.FamilyTreeModel source, global::Company.FamilyTree.Nationality target )
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.FamilyTreeModelHasNationalities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.FamilyTreeModelHasNationalities>(source, global::Company.FamilyTree.FamilyTreeModelHasNationalities.FamilyTreeModelDomainRoleId);
			foreach ( global::Company.FamilyTree.FamilyTreeModelHasNationalities link in links )
			{
				if ( target.Equals(link.Nationality) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainRelationship NationalityReferencesPersons
	/// Description for Company.FamilyTree.NationalityReferencesPersons
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.NationalityReferencesPersons.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.NationalityReferencesPersons.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("d49bd10f-bea8-4751-b055-9b9aff468cd9")]
	public partial class NationalityReferencesPersons : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// NationalityReferencesPersons domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd49bd10f, 0xbea8, 0x4751, 0xb0, 0x55, 0x9b, 0x9a, 0xff, 0x46, 0x8c, 0xd9);
	
				
		/// <summary>
		/// Constructor
		/// Creates a NationalityReferencesPersons link in the same Partition as the given Nationality
		/// </summary>
		/// <param name="source">Nationality to use as the source of the relationship.</param>
		/// <param name="target">Person to use as the target of the relationship.</param>
		public NationalityReferencesPersons(Nationality source, Person target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(NationalityReferencesPersons.NationalityDomainRoleId, source), new DslModeling::RoleAssignment(NationalityReferencesPersons.PersonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NationalityReferencesPersons(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NationalityReferencesPersons(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public NationalityReferencesPersons(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public NationalityReferencesPersons(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Nationality domain role code
		
		/// <summary>
		/// Nationality domain role Id.
		/// </summary>
		public static readonly global::System.Guid NationalityDomainRoleId = new global::System.Guid(0x1abd8a98, 0x8790, 0x4d01, 0xbf, 0x9c, 0x12, 0xbd, 0x21, 0xf8, 0xff, 0x23);
		
		/// <summary>
		/// DomainRole Nationality
		/// Description for Company.FamilyTree.NationalityReferencesPersons.Nationality
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.NationalityReferencesPersons/Nationality.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.NationalityReferencesPersons/Nationality.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Persons", PropertyDisplayNameKey="Company.FamilyTree.NationalityReferencesPersons/Nationality.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1abd8a98-8790-4d01-bf9c-12bd21f8ff23")]
		public virtual Nationality Nationality
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Nationality)DslModeling::DomainRoleInfo.GetRolePlayer(this, NationalityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, NationalityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Nationalities of a Person
		/// <summary>
		/// Gets a list of Nationalities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Nationality> GetNationalities(Person element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Nationality>, Nationality>(element, PersonDomainRoleId);
		}
		#endregion
		#region Person domain role code
		
		/// <summary>
		/// Person domain role Id.
		/// </summary>
		public static readonly global::System.Guid PersonDomainRoleId = new global::System.Guid(0x9fe8aa40, 0x3523, 0x4fdc, 0xa5, 0x35, 0x80, 0x0c, 0x39, 0x24, 0xa5, 0x4e);
		
		/// <summary>
		/// DomainRole Person
		/// Description for Company.FamilyTree.NationalityReferencesPersons.Person
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.NationalityReferencesPersons/Person.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.NationalityReferencesPersons/Person.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Nationalities", PropertyDisplayNameKey="Company.FamilyTree.NationalityReferencesPersons/Person.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9fe8aa40-3523-4fdc-a535-800c3924a54e")]
		public virtual Person Person
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Person)DslModeling::DomainRoleInfo.GetRolePlayer(this, PersonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, PersonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Persons of a Nationality
		/// <summary>
		/// Gets a list of Persons.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Person> GetPersons(Nationality element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(element, NationalityDomainRoleId);
		}
		#endregion
		#region Nationality link accessor
		/// <summary>
		/// Get the list of NationalityReferencesPersons links to a Nationality.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.NationalityReferencesPersons> GetLinksToPersons ( global::Company.FamilyTree.Nationality nationalityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.NationalityReferencesPersons>(nationalityInstance, global::Company.FamilyTree.NationalityReferencesPersons.NationalityDomainRoleId);
		}
		#endregion
		#region Person link accessor
		/// <summary>
		/// Get the list of NationalityReferencesPersons links to a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.NationalityReferencesPersons> GetLinksToNationalities ( global::Company.FamilyTree.Person personInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.NationalityReferencesPersons>(personInstance, global::Company.FamilyTree.NationalityReferencesPersons.PersonDomainRoleId);
		}
		#endregion
		#region NationalityReferencesPersons instance accessors
		
		/// <summary>
		/// Get any NationalityReferencesPersons links between a given Nationality and a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Company.FamilyTree.NationalityReferencesPersons> GetLinks( global::Company.FamilyTree.Nationality source, global::Company.FamilyTree.Person target )
		{
			global::System.Collections.Generic.List<global::Company.FamilyTree.NationalityReferencesPersons> outLinks = new global::System.Collections.Generic.List<global::Company.FamilyTree.NationalityReferencesPersons>();
			global::System.Collections.Generic.IList<global::Company.FamilyTree.NationalityReferencesPersons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.NationalityReferencesPersons>(source, global::Company.FamilyTree.NationalityReferencesPersons.NationalityDomainRoleId);
			foreach ( global::Company.FamilyTree.NationalityReferencesPersons link in links )
			{
				if ( target.Equals(link.Person) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one NationalityReferencesPersons link between a given Nationalityand a Person.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Company.FamilyTree.NationalityReferencesPersons GetLink( global::Company.FamilyTree.Nationality source, global::Company.FamilyTree.Person target )
		{
			global::System.Collections.Generic.IList<global::Company.FamilyTree.NationalityReferencesPersons> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Company.FamilyTree.NationalityReferencesPersons>(source, global::Company.FamilyTree.NationalityReferencesPersons.NationalityDomainRoleId);
			foreach ( global::Company.FamilyTree.NationalityReferencesPersons link in links )
			{
				if ( target.Equals(link.Person) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
