//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainClass FamilyTreeModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.FamilyTreeModel.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.FamilyTreeModel.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e3d1d856-a96c-4702-9887-44c4f0c5ac3e")]
	public partial class FamilyTreeModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FamilyTreeModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe3d1d856, 0xa96c, 0x4702, 0x98, 0x87, 0x44, 0xc4, 0xf0, 0xc5, 0xac, 0x3e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FamilyTreeModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FamilyTreeModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region People opposite domain role accessor
		
		/// <summary>
		/// Gets a list of People.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> People
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Company.FamilyTree.FamilyTreeModelHasPeople.FamilyTreeModelDomainRoleId);
			}
		}
		#endregion
		#region Towns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Towns.
		/// Description for Company.FamilyTree.FamilyTreeModelHasTowns.FamilyTreeModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Town> Towns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Town>, Town>(global::Company.FamilyTree.FamilyTreeModelHasTowns.FamilyTreeModelDomainRoleId);
			}
		}
		#endregion
		#region Nationalities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Nationalities.
		/// Description for
		/// Company.FamilyTree.FamilyTreeModelHasNationalities.FamilyTreeModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Nationality> Nationalities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Nationality>, Nationality>(global::Company.FamilyTree.FamilyTreeModelHasNationalities.FamilyTreeModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.FamilyTree.Person.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.FamilyTree.Town.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Company.FamilyTree.Nationality.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Company.FamilyTree.Person sourcePerson1 = sourceElement as global::Company.FamilyTree.Person;
			if (sourcePerson1 != null)
			{
				// Create link for path FamilyTreeModelHasPeople.People
				this.People.Add(sourcePerson1);

				return;
			}
				
			global::Company.FamilyTree.Town sourceTown2 = sourceElement as global::Company.FamilyTree.Town;
			if (sourceTown2 != null)
			{
				// Create link for path FamilyTreeModelHasTowns.Towns
				this.Towns.Add(sourceTown2);

				return;
			}
				
			global::Company.FamilyTree.Nationality sourceNationality3 = sourceElement as global::Company.FamilyTree.Nationality;
			if (sourceNationality3 != null)
			{
				// Create link for path FamilyTreeModelHasNationalities.Nationalities
				this.Nationalities.Add(sourceNationality3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Company.FamilyTree.Person sourcePerson1 = sourceElement as global::Company.FamilyTree.Person;
			if (sourcePerson1 != null)
			{
				// Delete link for path FamilyTreeModelHasPeople.People
				
				foreach (DslModeling::ElementLink link in global::Company.FamilyTree.FamilyTreeModelHasPeople.GetLinks((global::Company.FamilyTree.FamilyTreeModel)this, sourcePerson1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.FamilyTree.FamilyTreeModelHasPeople.FamilyTreeModelDomainRoleId, global::Company.FamilyTree.FamilyTreeModelHasPeople.ElementDomainRoleId);
				}

				return;
			}
				
			global::Company.FamilyTree.Town sourceTown2 = sourceElement as global::Company.FamilyTree.Town;
			if (sourceTown2 != null)
			{
				// Delete link for path FamilyTreeModelHasTowns.Towns
				
				foreach (DslModeling::ElementLink link in global::Company.FamilyTree.FamilyTreeModelHasTowns.GetLinks((global::Company.FamilyTree.FamilyTreeModel)this, sourceTown2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.FamilyTree.FamilyTreeModelHasTowns.FamilyTreeModelDomainRoleId, global::Company.FamilyTree.FamilyTreeModelHasTowns.TownDomainRoleId);
				}

				return;
			}
				
			global::Company.FamilyTree.Nationality sourceNationality3 = sourceElement as global::Company.FamilyTree.Nationality;
			if (sourceNationality3 != null)
			{
				// Delete link for path FamilyTreeModelHasNationalities.Nationalities
				
				foreach (DslModeling::ElementLink link in global::Company.FamilyTree.FamilyTreeModelHasNationalities.GetLinks((global::Company.FamilyTree.FamilyTreeModel)this, sourceNationality3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Company.FamilyTree.FamilyTreeModelHasNationalities.FamilyTreeModelDomainRoleId, global::Company.FamilyTree.FamilyTreeModelHasNationalities.NationalityDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainClass Person
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.Person.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.Person.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("2088beac-8520-447b-aba0-767a8052626c")]
	public partial class Person : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Person domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2088beac, 0x8520, 0x447b, 0xab, 0xa0, 0x76, 0x7a, 0x80, 0x52, 0x62, 0x6c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Person(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Person(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xcc48828b, 0x6971, 0x4a18, 0x9f, 0x79, 0x4d, 0xd0, 0xa0, 0x38, 0x96, 0x28);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.FamilyTree.Person.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Person/Name.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Person/Name.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("cc48828b-6971-4a18-9f79-4dd0a0389628")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BirthYear domain property code
		
		/// <summary>
		/// BirthYear domain property Id.
		/// </summary>
		public static readonly global::System.Guid BirthYearDomainPropertyId = new global::System.Guid(0x900194b0, 0x9b17, 0x4d9e, 0x8f, 0x37, 0x1e, 0xff, 0xa8, 0x09, 0x67, 0x76);
		
		/// <summary>
		/// Storage for BirthYear
		/// </summary>
		private global::System.Int32 birthYearPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of BirthYear domain property.
		/// Description for Company.FamilyTree.Person.Birth Year
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Person/BirthYear.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Person/BirthYear.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("900194b0-9b17-4d9e-8f37-1effa8096776")]
		public global::System.Int32 BirthYear
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return birthYearPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				BirthYearPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.BirthYear domain property.
		/// </summary>
		internal sealed partial class BirthYearPropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.Int32>
		{
			private BirthYearPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.BirthYear domain property value handler.
			/// </summary>
			public static readonly BirthYearPropertyHandler Instance = new BirthYearPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.BirthYear domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return BirthYearDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.birthYearPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.birthYearPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DeathYear domain property code
		
		/// <summary>
		/// DeathYear domain property Id.
		/// </summary>
		public static readonly global::System.Guid DeathYearDomainPropertyId = new global::System.Guid(0x9bb2b829, 0x765b, 0x4c28, 0x99, 0xd5, 0xae, 0xd0, 0x03, 0x7e, 0xbd, 0xc1);
		
		/// <summary>
		/// Storage for DeathYear
		/// </summary>
		private global::System.Int32 deathYearPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DeathYear domain property.
		/// Description for Company.FamilyTree.Person.Death Year
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Person/DeathYear.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Person/DeathYear.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9bb2b829-765b-4c28-99d5-aed0037ebdc1")]
		public global::System.Int32 DeathYear
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return deathYearPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DeathYearPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.DeathYear domain property.
		/// </summary>
		internal sealed partial class DeathYearPropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.Int32>
		{
			private DeathYearPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.DeathYear domain property value handler.
			/// </summary>
			public static readonly DeathYearPropertyHandler Instance = new DeathYearPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.DeathYear domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DeathYearDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.deathYearPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.deathYearPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Male domain property code
		
		/// <summary>
		/// Male domain property Id.
		/// </summary>
		public static readonly global::System.Guid MaleDomainPropertyId = new global::System.Guid(0xf954a0aa, 0x20f0, 0x49c6, 0x84, 0x4d, 0xe3, 0x5d, 0xa0, 0x2d, 0x5c, 0x83);
		
		/// <summary>
		/// Storage for Male
		/// </summary>
		private global::System.Boolean malePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Male domain property.
		/// Description for Company.FamilyTree.Person.Male
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Person/Male.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Person/Male.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f954a0aa-20f0-49c6-844d-e35da02d5c83")]
		public global::System.Boolean Male
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return malePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Person.Male domain property.
		/// </summary>
		internal sealed partial class MalePropertyHandler : DslModeling::DomainPropertyValueHandler<Person, global::System.Boolean>
		{
			private MalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.Male domain property value handler.
			/// </summary>
			public static readonly MalePropertyHandler Instance = new MalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.Male domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.malePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Person element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.malePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DecoratorControl domain property code
		
		/// <summary>
		/// DecoratorControl domain property Id.
		/// </summary>
		public static readonly global::System.Guid DecoratorControlDomainPropertyId = new global::System.Guid(0x9a8a82fb, 0x1116, 0x4344, 0x8f, 0x55, 0x09, 0x27, 0xd4, 0x61, 0x70, 0x15);
		
		/// <summary>
		/// Gets or sets the value of DecoratorControl domain property.
		/// Description for Company.FamilyTree.Person.Decorator Control
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Person/DecoratorControl.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Person/DecoratorControl.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("9a8a82fb-1116-4344-8f55-0927d4617015")]
		public global::System.Boolean DecoratorControl
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DecoratorControlPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the Person.DecoratorControl domain property.
		/// </summary>
		internal sealed partial class DecoratorControlPropertyHandler : DslModeling::CalculatedPropertyValueHandler<Person, global::System.Boolean>
		{
			private DecoratorControlPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Person.DecoratorControl domain property value handler.
			/// </summary>
			public static readonly DecoratorControlPropertyHandler Instance = new DecoratorControlPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Person.DecoratorControl domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DecoratorControlDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Person element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DecoratorControl because its Kind is
				// set to Calculated. Please provide the GetDecoratorControlValue()
				// method on the domain class.
				return element.GetDecoratorControlValue();
			}
		
		}
		
		#endregion
		#region FamilyTreeModel opposite domain role accessor
		/// <summary>
		/// Gets or sets FamilyTreeModel.
		/// </summary>
		public virtual FamilyTreeModel FamilyTreeModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.FamilyTree.FamilyTreeModelHasPeople.ElementDomainRoleId) as FamilyTreeModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.FamilyTree.FamilyTreeModelHasPeople.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Children opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Children.
		/// Description for Company.FamilyTree.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> Children
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Company.FamilyTree.PersonReferencesChildren.SourceDomainRoleId);
			}
		}
		#endregion
		#region Parents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Parents.
		/// Description for Company.FamilyTree.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> Parents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Company.FamilyTree.PersonReferencesChildren.TargetDomainRoleId);
			}
		}
		#endregion
		#region Town opposite domain role accessor
		/// <summary>
		/// Gets or sets Town.
		/// Description for Company.FamilyTree.Residence.Person
		/// </summary>
		public virtual Town Town
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.FamilyTree.Residence.PersonDomainRoleId) as Town;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.FamilyTree.Residence.PersonDomainRoleId, value);
			}
		}
		#endregion
		#region Nationalities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Nationalities.
		/// Description for Company.FamilyTree.NationalityReferencesPersons.Person
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Nationality> Nationalities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Nationality>, Nationality>(global::Company.FamilyTree.NationalityReferencesPersons.PersonDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainClass Town
	/// Description for Company.FamilyTree.Town
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.Town.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.Town.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("4eb9e2ce-e785-4b48-8c4d-4e80d9eeb831")]
	public partial class Town : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Town domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4eb9e2ce, 0xe785, 0x4b48, 0x8c, 0x4d, 0x4e, 0x80, 0xd9, 0xee, 0xb8, 0x31);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Town(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Town(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x3e0721e5, 0xe0f5, 0x4cca, 0xb2, 0x27, 0x48, 0x8d, 0xb1, 0xe2, 0xc9, 0xd6);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.FamilyTree.Town.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Town/Name.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Town/Name.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3e0721e5-e0f5-4cca-b227-488db1e2c9d6")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Town.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Town, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Town.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Town.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Town element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Town element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FamilyTreeModel opposite domain role accessor
		/// <summary>
		/// Gets or sets FamilyTreeModel.
		/// Description for Company.FamilyTree.FamilyTreeModelHasTowns.Town
		/// </summary>
		public virtual FamilyTreeModel FamilyTreeModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.FamilyTree.FamilyTreeModelHasTowns.TownDomainRoleId) as FamilyTreeModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.FamilyTree.FamilyTreeModelHasTowns.TownDomainRoleId, value);
			}
		}
		#endregion
		#region Residents opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Residents.
		/// Description for Company.FamilyTree.Residence.Town
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> Residents
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Company.FamilyTree.Residence.TownDomainRoleId);
			}
		}
		#endregion
	}
}
namespace Company.FamilyTree
{
	/// <summary>
	/// DomainClass Nationality
	/// Description for Company.FamilyTree.Nationality
	/// </summary>
	[DslDesign::DisplayNameResource("Company.FamilyTree.Nationality.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Company.FamilyTree.Nationality.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Company.FamilyTree.FamilyTreeDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("463b27c2-410a-44de-93de-b1d2d3943213")]
	public partial class Nationality : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Nationality domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x463b27c2, 0x410a, 0x44de, 0x93, 0xde, 0xb1, 0xd2, 0xd3, 0x94, 0x32, 0x13);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Nationality(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Nationality(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xc868d376, 0x0ddb, 0x4774, 0xb3, 0x36, 0x72, 0xcf, 0xd7, 0xf1, 0x61, 0x56);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Company.FamilyTree.Nationality.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Company.FamilyTree.Nationality/Name.DisplayName", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Company.FamilyTree.Nationality/Name.Description", typeof(global::Company.FamilyTree.FamilyTreeDomainModel), "Company.FamilyTree.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c868d376-0ddb-4774-b336-72cfd7f16156")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Nationality.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Nationality, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Nationality.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Nationality.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Nationality element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Nationality element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FamilyTreeModel opposite domain role accessor
		/// <summary>
		/// Gets or sets FamilyTreeModel.
		/// Description for Company.FamilyTree.FamilyTreeModelHasNationalities.Nationality
		/// </summary>
		public virtual FamilyTreeModel FamilyTreeModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Company.FamilyTree.FamilyTreeModelHasNationalities.NationalityDomainRoleId) as FamilyTreeModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Company.FamilyTree.FamilyTreeModelHasNationalities.NationalityDomainRoleId, value);
			}
		}
		#endregion
		#region Persons opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Persons.
		/// Description for Company.FamilyTree.NationalityReferencesPersons.Nationality
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Person> Persons
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Person>, Person>(global::Company.FamilyTree.NationalityReferencesPersons.NationalityDomainRoleId);
			}
		}
		#endregion
	}
}
